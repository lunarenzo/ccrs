import React, { ReactNode } from 'react';\nimport type { UserRole, CCRSUser } from '../shared-types/rbac';\n\n// Generic props for role protection components\ninterface RoleProtectionProps {\n  children: ReactNode;\n  allowedRoles?: UserRole[];\n  requireActiveStatus?: boolean;\n  fallback?: ReactNode;\n  redirectTo?: string;\n}\n\n// Base interface for auth context (to be implemented by each app)\nexport interface BaseAuthContext {\n  user: CCRSUser | null;\n  isAuthenticated: boolean;\n  loading: boolean;\n  hasRole?: (role: UserRole | UserRole[]) => boolean;\n}\n\n/**\n * Higher-order component factory for role-based protection\n * Each app should create their own version using their auth context\n */\nexport function createRoleProtection<T extends BaseAuthContext>(useAuth: () => T) {\n  \n  /**\n   * Component that requires user to be authenticated\n   */\n  function RequireAuth({ \n    children, \n    fallback = <div>Please log in to access this content.</div>,\n    redirectTo \n  }: Pick<RoleProtectionProps, 'children' | 'fallback' | 'redirectTo'>) {\n    const { isAuthenticated, loading } = useAuth();\n    \n    if (loading) {\n      return <div>Loading...</div>;\n    }\n    \n    if (!isAuthenticated) {\n      if (redirectTo && typeof window !== 'undefined') {\n        window.location.href = redirectTo;\n        return null;\n      }\n      return <>{fallback}</>;\n    }\n    \n    return <>{children}</>;\n  }\n  \n  /**\n   * Component that requires user to have specific role(s)\n   */\n  function RequireRole({ \n    children, \n    allowedRoles = [], \n    requireActiveStatus = true,\n    fallback = <div>Access denied. You don't have permission to view this content.</div>,\n    redirectTo \n  }: RoleProtectionProps) {\n    const { user, isAuthenticated, loading, hasRole } = useAuth();\n    \n    if (loading) {\n      return <div>Loading...</div>;\n    }\n    \n    if (!isAuthenticated || !user) {\n      if (redirectTo && typeof window !== 'undefined') {\n        window.location.href = redirectTo;\n        return null;\n      }\n      return <div>Please log in to access this content.</div>;\n    }\n    \n    // Check if user status is active (if required)\n    if (requireActiveStatus && user.status !== 'active') {\n      return (\n        <div className=\"alert alert-warning\">\n          <h4>Account Status</h4>\n          <p>\n            Your account is currently <strong>{user.status}</strong>. \n            Please contact an administrator to activate your account.\n          </p>\n        </div>\n      );\n    }\n    \n    // Check role permissions\n    const hasRequiredRole = hasRole ? \n      hasRole(allowedRoles) : \n      allowedRoles.length === 0 || allowedRoles.includes(user.role);\n    \n    if (!hasRequiredRole) {\n      if (redirectTo && typeof window !== 'undefined') {\n        window.location.href = redirectTo;\n        return null;\n      }\n      return <>{fallback}</>;\n    }\n    \n    return <>{children}</>;\n  }\n  \n  /**\n   * Component that requires admin role\n   */\n  function RequireAdmin({ \n    children, \n    fallback = <div>Access denied. Admin privileges required.</div>,\n    redirectTo \n  }: Pick<RoleProtectionProps, 'children' | 'fallback' | 'redirectTo'>) {\n    return (\n      <RequireRole \n        allowedRoles={['admin']} \n        fallback={fallback}\n        redirectTo={redirectTo}\n      >\n        {children}\n      </RequireRole>\n    );\n  }\n  \n  /**\n   * Component that requires law enforcement role (officer or supervisor)\n   */\n  function RequireLawEnforcement({ \n    children, \n    fallback = <div>Access denied. Law enforcement privileges required.</div>,\n    redirectTo \n  }: Pick<RoleProtectionProps, 'children' | 'fallback' | 'redirectTo'>) {\n    return (\n      <RequireRole \n        allowedRoles={['officer', 'supervisor']} \n        fallback={fallback}\n        redirectTo={redirectTo}\n      >\n        {children}\n      </RequireRole>\n    );\n  }\n  \n  /**\n   * Component that requires supervisor or admin role\n   */\n  function RequireSupervisor({ \n    children, \n    fallback = <div>Access denied. Supervisor privileges required.</div>,\n    redirectTo \n  }: Pick<RoleProtectionProps, 'children' | 'fallback' | 'redirectTo'>) {\n    return (\n      <RequireRole \n        allowedRoles={['supervisor', 'admin']} \n        fallback={fallback}\n        redirectTo={redirectTo}\n      >\n        {children}\n      </RequireRole>\n    );\n  }\n  \n  /**\n   * Component that shows content only if user has specific role\n   * Unlike RequireRole, this doesn't show fallback, just hides content\n   */\n  function ShowForRoles({ \n    children, \n    allowedRoles = [], \n    requireActiveStatus = true \n  }: Pick<RoleProtectionProps, 'children' | 'allowedRoles' | 'requireActiveStatus'>) {\n    const { user, isAuthenticated, hasRole } = useAuth();\n    \n    if (!isAuthenticated || !user) {\n      return null;\n    }\n    \n    if (requireActiveStatus && user.status !== 'active') {\n      return null;\n    }\n    \n    const hasRequiredRole = hasRole ? \n      hasRole(allowedRoles) : \n      allowedRoles.length === 0 || allowedRoles.includes(user.role);\n    \n    if (!hasRequiredRole) {\n      return null;\n    }\n    \n    return <>{children}</>;\n  }\n  \n  /**\n   * Component that hides content for specific roles\n   */\n  function HideForRoles({ \n    children, \n    hiddenRoles = [], \n    requireActiveStatus = true \n  }: {\n    children: ReactNode;\n    hiddenRoles?: UserRole[];\n    requireActiveStatus?: boolean;\n  }) {\n    const { user, isAuthenticated, hasRole } = useAuth();\n    \n    if (!isAuthenticated || !user) {\n      return <>{children}</>;\n    }\n    \n    if (requireActiveStatus && user.status !== 'active') {\n      return null;\n    }\n    \n    const hasHiddenRole = hasRole ? \n      hasRole(hiddenRoles) : \n      hiddenRoles.includes(user.role);\n    \n    if (hasHiddenRole) {\n      return null;\n    }\n    \n    return <>{children}</>;\n  }\n  \n  return {\n    RequireAuth,\n    RequireRole,\n    RequireAdmin,\n    RequireLawEnforcement,\n    RequireSupervisor,\n    ShowForRoles,\n    HideForRoles\n  };\n}\n\n/**\n * Hook for role-based conditional rendering\n */\nexport function createRoleHooks<T extends BaseAuthContext>(useAuth: () => T) {\n  \n  function useRoleCheck() {\n    const { user, isAuthenticated } = useAuth();\n    \n    const hasRole = (roles: UserRole | UserRole[]): boolean => {\n      if (!isAuthenticated || !user) return false;\n      const roleArray = Array.isArray(roles) ? roles : [roles];\n      return roleArray.includes(user.role);\n    };\n    \n    const isActive = (): boolean => {\n      return !!(isAuthenticated && user && user.status === 'active');\n    };\n    \n    const isAdmin = (): boolean => {\n      return hasRole('admin') && isActive();\n    };\n    \n    const isSupervisor = (): boolean => {\n      return hasRole(['supervisor', 'admin']) && isActive();\n    };\n    \n    const isLawEnforcement = (): boolean => {\n      return hasRole(['officer', 'supervisor']) && isActive();\n    };\n    \n    const isCitizen = (): boolean => {\n      return hasRole('citizen') && isActive();\n    };\n    \n    return {\n      hasRole,\n      isActive,\n      isAdmin,\n      isSupervisor,\n      isLawEnforcement,\n      isCitizen,\n      user,\n      isAuthenticated\n    };\n  }\n  \n  return {\n    useRoleCheck\n  };\n}
