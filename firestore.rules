rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================================
    // HELPER FUNCTIONS
    // ============================================
    
    // Helper: role check via custom auth claims OR users doc
    function hasRole(role) {
      return request.auth != null && (
        (request.auth.token.role != null && request.auth.token.role == role) ||
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role)
      );
    }

    // Helper functions for specific roles
    function isAdmin() {
      return hasRole('admin');
    }
    
    function isOfficer() {
      return hasRole('officer');
    }
    
    function isInvestigator() {
      return hasRole('investigator') || hasRole('officer'); // Officers can act as investigators
    }
    
    function isSupervisor() {
      return hasRole('supervisor');
    }
    
    function isLawEnforcement() {
      return isOfficer() || isSupervisor() || isInvestigator();
    }
    
    function isCitizen() {
      return hasRole('citizen');
    }
    
    function isDeskOfficer() {
      return hasRole('desk_officer');
    }
    
    function isLawEnforcementOrDesk() {
      return isOfficer() || isSupervisor() || isDeskOfficer() || isInvestigator();
    }

    // Helper: validate Expo push token format
    function isValidExpoPushToken(token) {
      // Regex: must start with ExponentPushToken[ ... ]
      return token is string && token.matches('^ExponentPushToken\\[[^\\]]+\\]$');
    }

    // Validation helpers
    function validPriorities() { return ['low', 'medium', 'high', 'critical']; }
    function validSubmissionTypes() { return ['anonymous', 'authenticated']; }
    function validMainCategories() { return ['crime', 'child_abuse', 'women_abuse', 'other']; }
    function validReportStatuses() { return ['pending', 'validated', 'assigned', 'accepted', 'responding', 'investigating', 'resolved', 'closed', 'rejected', 'archived']; }
    function validTriageLevels() { return ['critical', 'high', 'medium', 'low']; }
    function validApprovalStatuses() { return ['pending', 'approved', 'denied']; }
    function validAssignmentStatuses() { return ['pending', 'accepted', 'declined']; }

    function isValidCoordinates(coords) {
      return coords is map && coords.latitude is number && coords.longitude is number;
    }

    function isValidLocation(loc) {
      return loc is map
        && (!loc.keys().hasAny(['coordinates']) || isValidCoordinates(loc.coordinates))
        && (!loc.keys().hasAny(['address']) || (loc.address is string))
        && (!loc.keys().hasAny(['accuracy']) || (loc.accuracy is number));
    }

    function hasOnlyAllowedCreateKeys(data) {
      return data.keys().hasOnly([
        'user_id',
        'status',
        'assignmentStatus',
        'assignedTo',
        'priority',
        'mainCategory',
        'category',
        'description',
        'location',
        'media_urls',
        'officerNotes',
        'resolutionNotes',
        'timestamp',
        'updatedAt',
        'submission_type',
        'media_count',
        'has_location',
        // Sprint 1: Emergency Triage fields
        'isEmergency',
        'triageLevel',
        'triageNotes',
        'triageBy',
        'triageAt',
        // Sprint 1: Blotter numbering fields
        'blotterNumber',
        'blotterCreatedAt',
        'blotterCreatedBy',
        // Sprint 2: Investigation & Approval fields
        'crimeCategory',
        'crimeCode',
        'statusHistory',
        'irfGenerated',
        'irfPdfUrl',
        'supervisorApproval',
        'reassignmentHistory'
      ]);
    }

    function isValidReportCreate(data) {
      return (data.user_id is string)
        && (data.category is string)
        && (data.description is string)
        && (data.status == 'pending')
        && (data.timestamp is timestamp)
        && (!data.keys().hasAny(['priority']) || (data.priority in validPriorities()))
        && (!data.keys().hasAny(['mainCategory']) || (data.mainCategory in validMainCategories()))
        && (!data.keys().hasAny(['submission_type']) || (data.submission_type in validSubmissionTypes()))
        && (!data.keys().hasAny(['media_urls']) || (data.media_urls is list))
        && (!data.keys().hasAny(['media_count']) || (data.media_count is number))
        && (!data.keys().hasAny(['has_location']) || (data.has_location is bool))
        && (!data.keys().hasAny(['location']) || isValidLocation(data.location));
    }

    // ============================================
    // USERS COLLECTION
    // ============================================
    
    match /users/{userId} {
      // Users can read and write their own data
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow admins to read and update all users (for user management)
      allow read, update: if isAdmin();
      
      // Allow supervisors to read officer profiles in their unit
      allow read: if isSupervisor();
      
      // Allow user creation during registration (citizen, officer, admin, desk_officer)
      allow create: if request.auth != null && 
                   request.auth.uid == userId &&
                   request.resource.data.keys().hasAll(['email', 'role', 'createdAt']) &&
                   request.resource.data.role in ['citizen', 'officer', 'supervisor', 'admin', 'desk_officer'];
    }

    // ============================================
    // OFFICERS COLLECTION (for push tokens)
    // ============================================
    
    match /officers/{officerId} {
      // Read allowed for the officer themselves, supervisors, and admins
      allow read: if (request.auth != null && request.auth.uid == officerId)
                  || isSupervisor()
                  || isAdmin();

      // Create allowed for the authenticated officer
      allow create: if request.auth != null && request.auth.uid == officerId &&
                    // If pushToken provided at create, validate format
                    (!request.resource.data.keys().hasAny(['pushToken']) || isValidExpoPushToken(request.resource.data.pushToken));

      // Update allowed only for the authenticated officer and only specific keys
      allow update: if request.auth != null
                    && request.auth.uid == officerId
                    && request.resource.data.diff(resource.data).changedKeys().hasOnly([
                      'pushToken',
                      'lastTokenUpdate'
                    ])
                    && (
                      // Allow clearing the token
                      (request.resource.data.keys().hasAny(['pushToken']) && request.resource.data.pushToken == null)
                      ||
                      // Or when setting/updating, ensure valid Expo token format
                      (!request.resource.data.keys().hasAny(['pushToken']))
                      ||
                      isValidExpoPushToken(request.resource.data.pushToken)
                    );
    }

    // ============================================
    // REPORTS COLLECTION
    // ============================================
    
    match /reports/{reportId} {
      
      // CREATE RULES
      // Citizens (including anonymous) can create reports they own
      allow create: if request.auth != null &&
                    request.resource.data.keys().hasAll(['user_id', 'category', 'description', 'status', 'timestamp']) &&
                    hasOnlyAllowedCreateKeys(request.resource.data) &&
                    isValidReportCreate(request.resource.data) &&
                    // Prevent citizen from pre-setting assignment or officer-only fields
                    !request.resource.data.keys().hasAny(['assignedTo', 'assignmentStatus', 'officerNotes', 'resolutionNotes']) &&
                    (
                      request.resource.data.user_id == request.auth.uid ||
                      (request.auth.token.firebase.sign_in_provider == 'anonymous' &&
                       request.resource.data.user_id == request.auth.uid)
                    );
      
      // READ RULES
      // Unified read access for owner, assigned officer, supervisors, admins, and desk officers
      allow read: if request.auth != null && (
        resource.data.user_id == request.auth.uid ||          // Citizens see their own reports
        resource.data.assignedTo == request.auth.uid ||       // Officers see assigned reports  
        isSupervisor() ||                                      // Supervisors see all reports
        isAdmin() ||                                           // Admins see all reports
        isDeskOfficer()                                        // Desk officers see all pending reports
      );
      
      // UPDATE RULES
      
      // Investigators/Officers can update reports assigned to them with restricted fields and valid transitions
      allow update: if request.auth != null &&
                    (isInvestigator() || isOfficer()) &&
                    resource.data.assignedTo == request.auth.uid &&
                    // Only allow specific fields
                    request.resource.data.diff(resource.data).changedKeys().hasOnly([
                      'status',
                      'assignmentStatus',
                      'officerNotes',
                      'resolutionNotes',
                      'updatedAt',
                      'declineReason',
                      'assignedTo',
                      'crimeCategory',
                      'crimeCode',
                      'statusHistory'
                    ]) &&
                    // Enforce enhanced state transitions for Sprint 2
                    isValidStatusTransition(resource.data.status, request.resource.data.status) &&
                    // Ensure status history is properly maintained
                    (!request.resource.data.keys().hasAny(['statusHistory']) || 
                     (request.resource.data.statusHistory is list && 
                      request.resource.data.statusHistory.size() > resource.data.get('statusHistory', []).size()));
      
      // Desk officers can validate pending reports and add triage information
      allow update: if request.auth != null &&
                    isDeskOfficer() &&
                    resource.data.status == 'pending' &&
                    request.resource.data.diff(resource.data).changedKeys().hasOnly([
                      'status',
                      'triageLevel',
                      'triageNotes', 
                      'triageBy',
                      'triageAt',
                      'blotterNumber',
                      'blotterCreatedAt',
                      'blotterCreatedBy',
                      'updatedAt',
                      'assignedTo',
                      'assignmentStatus'
                    ]) &&
                    // Allow validation and assignment transitions
                    (request.resource.data.status in ['validated', 'rejected', 'assigned']) &&
                    // If status is assigned, must have assignedTo and assignmentStatus
                    (request.resource.data.status != 'assigned' || 
                     (request.resource.data.keys().hasAny(['assignedTo']) && request.resource.data.assignedTo != null &&
                      request.resource.data.keys().hasAny(['assignmentStatus']) && request.resource.data.assignmentStatus == 'pending')) &&
                    // Ensure triage fields are properly set if provided
                    (!request.resource.data.keys().hasAny(['triageLevel']) || request.resource.data.triageLevel in validTriageLevels()) &&
                    (!request.resource.data.keys().hasAny(['triageBy']) || request.resource.data.triageBy == request.auth.uid);
      
      // Supervisors can reassign cases and approve closures
      allow update: if isSupervisor() &&
                    (
                      // Case reassignment
                      isReassignmentUpdate(resource.data, request.resource.data) ||
                      // Approval actions
                      isApprovalUpdate(resource.data, request.resource.data) ||
                      // General supervisor oversight
                      request.resource.data.diff(resource.data).changedKeys().hasOnly([
                        'assignedTo', 'assignmentStatus', 'status', 'supervisorApproval',
                        'reassignmentHistory', 'statusHistory', 'updatedAt'
                      ])
                    );
      
      // Supervisors can read all reports
      allow read: if isSupervisor();
      
      // Admins can read, update, and delete all reports (full access)
      allow read, update, delete: if isAdmin();
    }

    // ============================================
    // REPORT EVIDENCE SUBCOLLECTION
    // ============================================
    
    match /reports/{reportId}/report_evidence/{evidenceId} {
      // Officers assigned to the report can read and create evidence
      allow read, create: if request.auth != null &&
                         get(/databases/$(database)/documents/reports/$(reportId)).data.assignedTo == request.auth.uid &&
                         isLawEnforcement();
      
      // Supervisors can read all evidence
      allow read: if isSupervisor();
      
      // Admins can read all evidence
      allow read: if isAdmin();
      
      // Evidence is immutable once created (no updates/deletes for security)
      allow update, delete: if false;
    }

    // ============================================
    // AUDIT LOGS COLLECTION
    // ============================================
    
    match /audit_logs/{logId} {
      // Law enforcement and admins can read audit logs
      allow read: if isLawEnforcement() || isAdmin();

      // Allow creating new audit entries (append-only)
      allow create: if (isLawEnforcement() || isAdmin()) &&
                    // Prevent raw note/comment text from being stored in details map
                    (
                      !(request.resource.data.details is map) ||
                      !request.resource.data.details.keys().hasAny(['note', 'text', 'comment', 'commentText'])
                    );

      // Logs are immutable: no updates or deletes for anyone (including admins)
      allow update, delete: if false;
    }

    // ============================================
    // COUNTERS COLLECTION (for blotter numbering)
    // ============================================
    
    match /counters/{counterId} {
      // Desk officers, supervisors, and admins can read and update counters
      allow read, write: if isDeskOfficer() || isSupervisor() || isAdmin();
    }

    // ============================================
    // SPRINT 2: NEW COLLECTIONS
    // ============================================
    
    // Crime Categories Collection
    match /crimeCategories/{categoryId} {
      // Read access for all authenticated users (for dropdowns)
      allow read: if request.auth != null;
      
      // Write access restricted to admins and supervisors
      allow create, update, delete: if isAdmin() || isSupervisor();
    }
    
    // IRF Templates Collection
    match /irfTemplates/{templateId} {
      // Read access for desk officers, investigators, supervisors, and admins
      allow read: if isDeskOfficer() || isInvestigator() || isSupervisor() || isAdmin();
      
      // Write access restricted to admins only
      allow create, update, delete: if isAdmin();
    }
    
    // Approval Queue Collection
    match /approvalQueue/{approvalId} {
      // Investigators can read their submissions and create new approvals
      allow read: if (isInvestigator() && resource.data.submittedBy == request.auth.uid) ||
                     isSupervisor() || isAdmin();
      
      allow create: if isInvestigator() && 
                       request.resource.data.submittedBy == request.auth.uid &&
                       request.resource.data.status == 'pending';
      
      // Supervisors can update approval status
      allow update: if isSupervisor() &&
                       resource.data.status == 'pending' &&
                       request.resource.data.status in validApprovalStatuses() &&
                       request.resource.data.diff(resource.data).changedKeys().hasOnly([
                         'status', 'remarks', 'approvedBy', 'approvedAt', 'updatedAt'
                       ]);
      
      // No deletion allowed (audit trail)
      allow delete: if false;
    }
    
    // Status transition validation helper functions
    function isValidStatusTransition(currentStatus, newStatus) {
      let validTransitions = {
        'pending': ['validated', 'rejected'],
        'validated': ['assigned'],
        'assigned': ['accepted', 'declined'],
        'accepted': ['responding'],
        'responding': ['investigating'],
        'investigating': ['resolved', 'investigating'], // Can update within investigating
        'resolved': ['closed', 'investigating'], // Can reopen if needed
        'closed': ['archived'],
        'archived': []
      };
      return newStatus in validTransitions[currentStatus];
    }
    
    function isReassignmentUpdate(oldData, newData) {
      return newData.diff(oldData).changedKeys().hasOnly(['assignedTo', 'reassignmentHistory', 'updatedAt']) &&
             newData.assignedTo != oldData.assignedTo &&
             newData.reassignmentHistory is list;
    }
    
    function isApprovalUpdate(oldData, newData) {
      return newData.diff(oldData).changedKeys().hasOnly(['status', 'supervisorApproval', 'statusHistory', 'updatedAt']) &&
             oldData.status == 'resolved' &&
             newData.status == 'closed' &&
             newData.supervisorApproval.status == 'approved';
    }
    
    // ============================================
    // CATCH-ALL DENY RULE
    // ============================================
    
    // Deny all other operations not explicitly allowed
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
